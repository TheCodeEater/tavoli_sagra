esphome:
    name: bob
    includes:
      - components/ble_scanner/bleScanner.h
    libraries:
      - ArduinoJSON

esp32:
    board: nodemcu-32s

custom_component:
  - lambda: |-
      auto ble = new jcc::bleScanner();
      auto counter = new jcc::counter(7);
      return {ble,counter};

    components: 
      - id: ble
      - id: ble_counter

# Ble tracker
esp32_ble_tracker:
  scan_parameters:
    duration: 5 s
  on_scan_end: 
    then: #process rssi data and purge device
      - lambda: |-
          ESP_LOGI("Scan","Scan complete");
          auto scan=static_cast<jcc::bleScanner*>(id(ble));
          auto counter=static_cast<jcc::counter*>(id(ble_counter));
          bool found_nearby=scan->checkNearbyDevices(-60); //check scan result
          //if a device has been found
          if(found_nearby){
            counter->clear(); //reset no device found time counter
            id(nearby_devices)->publish_state(true); //turn on the light
          }else{//no devices found
            //count this scan session as not found
            counter->increase();
            if(counter->isOverflow()){
              //if the maximum device absence time has been reached, turn off and reset
              id(nearby_devices)->publish_state(false); //update nearby devices sensor
              counter->clear();
            }
          }
          scan->clearDevices(); //clear devices, ready for next scan
          

text_sensor:
  - platform: ble_scanner
    name: "BLE Devices Scanner"
    on_value:
      lambda: |-
        static_cast<jcc::bleScanner*>(id(ble))->processDevice(x);
        


#Wireless config system
#Set up AP for management (only available to us)
wifi: 
    ap: #Access point
        ssid: SagraMezzano_3
        password: i_cinesi_sono_tutti_uguali

    output_power: "8.5dB" #save some power

logger: #Log to serial
  level: debug

ota:
    password: "sei_bera_o_bando"

web_server: #HTML control page
    port: 80
    local: true

#External inputs
binary_sensor:
     #External on-off key. Has right of way over BLE
     - platform: gpio
       id: external_light_switch
       pin: 
         number: GPIO26
         inverted: true
       on_state: #whenever receiving a new state, set it. Does not toggle
          - light.control:
              id: main_light
              state: !lambda return x;

     - platform: template
       id: nearby_devices
       name: "nearby devices"
       on_state: #whenever receiving a new state, set it. Does not toggle
         then:
            - if:
                condition:
                  lambda: "return !id(external_light_switch).state;"
                then:
                  - light.control:
                      id: main_light
                      state: !lambda return x;



#Light components
#Circular light of the table
light:
    - platform: monochromatic
      id: main_light
      name: "Striscia led"
      output: main_output
    #  red: circle_red
    #  green: circle_green
    #  blue: circle_blue
    #- platform: binary
    #  id: test_light
    #  output: internal_led



#Output
output:
    #PWM outputs
    - platform: ledc
      id: main_output
      pin: GPIO32
    #- platform: ledc
    #  id: circle_green
    #  pin: GPIO33
    #- platform: ledc
    #  id: circle_blue
    #  pin: GPIO25
    #- platform: gpio
    #  pin: GPIO2
    #  id: internal_led

# Other lights shall be defined here